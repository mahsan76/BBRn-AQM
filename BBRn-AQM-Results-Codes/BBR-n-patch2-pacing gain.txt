diff --git a/net/ipv4/tcp_bbr.c b/net/ipv4/tcp_bbr.c
index 06f247ca9197..daa4db353139 100644
--- a/net/ipv4/tcp_bbr.c
+++ b/net/ipv4/tcp_bbr.c
@@ -176,6 +176,70 @@ static const u32 bbr_lt_bw_diff = 4000 / 8;
 /* If we estimate we're policed, use lt_bw for this many round trips: */
 static const u32 bbr_lt_bw_max_rtts = 48;
 
+int tcp_bbr_gain_probe_y1 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y1, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y1, "BBR probe state gain factor Y1");
+int tcp_bbr_gain_probe_y2 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y2, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y2, "BBR probe state gain factor Y2");
+int tcp_bbr_gain_probe_y3 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y3, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y3, "BBR probe state gain factor Y3");
+int tcp_bbr_gain_probe_y4 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y4, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y4, "BBR probe state gain factor Y4");
+int tcp_bbr_gain_probe_y5 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y5, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y5, "BBR probe state gain factor Y5");
+int tcp_bbr_gain_probe_y6 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y6, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y6, "BBR probe state gain factor Y6");
+int tcp_bbr_gain_probe_y7 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y7, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y7, "BBR probe state gain factor Y7");
+int tcp_bbr_gain_probe_y8 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y8, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y8, "BBR probe state gain factor Y8");
+int tcp_bbr_gain_probe_y9 __read_mostly = 8;
+module_param(tcp_bbr_gain_probe_y9, int, 0644);
+MODULE_PARM_DESC(tcp_bbr_gain_probe_y9, "BBR probe state gain factor Y9");
+
+static int bbr_get_gain_probe (unsigned int state)
+{
+	int modifier = 0;
+	switch (state)
+	{
+	case 0:
+		modifier = tcp_bbr_gain_probe_y1 / 8;
+		break;
+	case 1:
+		modifier = tcp_bbr_gain_probe_y2 / 8;
+		break;
+	case 2:
+		modifier = tcp_bbr_gain_probe_y3 / 8;
+		break;
+	case 3:
+		modifier = tcp_bbr_gain_probe_y4 / 8;
+		break;
+	case 4:
+		modifier = tcp_bbr_gain_probe_y5 / 8;
+		break;
+	case 5:
+		modifier = tcp_bbr_gain_probe_y6 / 8;
+		break;
+	case 6:
+		modifier = tcp_bbr_gain_probe_y7 / 8;
+		break;
+	case 7:
+		modifier = tcp_bbr_gain_probe_y8 / 8;
+		break;
+	case 8:
+		modifier = tcp_bbr_gain_probe_y9 / 8;
+		break;
+	}
+	return bbr_pacing_gain[state] * modifier;
+}
+
 /* Do we estimate that STARTUP filled the pipe? */
 static bool bbr_full_bw_reached(const struct sock *sk)
 {
@@ -486,7 +550,7 @@ static void bbr_advance_cycle_phase(struct sock *sk)
 	bbr->cycle_idx = (bbr->cycle_idx + 1) & (CYCLE_LEN - 1);
 	bbr->cycle_mstamp = tp->delivered_mstamp;
 	bbr->pacing_gain = bbr->lt_use_bw ? BBR_UNIT :
-					    bbr_pacing_gain[bbr->cycle_idx];
+					    bbr_get_gain_probe(bbr->cycle_idx);
 }
 
 /* Gain cycling: cycle pacing gain to converge to fair share of available bw. */


